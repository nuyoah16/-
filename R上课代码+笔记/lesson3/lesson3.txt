
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.79 (8160) aarch64-apple-darwin20]

[Workspace restored from /Users/jiang/.RData]
[History restored from /Users/jiang/.Rapp.history]

> mat=matrix(1:100,20,5)
> mat
      [,1] [,2] [,3] [,4] [,5]
 [1,]    1   21   41   61   81
 [2,]    2   22   42   62   82
 [3,]    3   23   43   63   83
 [4,]    4   24   44   64   84
 [5,]    5   25   45   65   85
 [6,]    6   26   46   66   86
 [7,]    7   27   47   67   87
 [8,]    8   28   48   68   88
 [9,]    9   29   49   69   89
[10,]   10   30   50   70   90
[11,]   11   31   51   71   91
[12,]   12   32   52   72   92
[13,]   13   33   53   73   93
[14,]   14   34   54   74   94
[15,]   15   35   55   75   95
[16,]   16   36   56   76   96
[17,]   17   37   57   77   97
[18,]   18   38   58   78   98
[19,]   19   39   59   79   99
[20,]   20   40   60   80  100
> apply(mat,1,mean)#计算每行的均值
 [1] 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
> apply(mat,2,mean)#计算每列的均值
[1] 10.5 30.5 50.5 70.5 90.5
> arr=array(1:120,c(20,3,4))
> arr
, , 1

      [,1] [,2] [,3]
 [1,]    1   21   41
 [2,]    2   22   42
 [3,]    3   23   43
 [4,]    4   24   44
 [5,]    5   25   45
 [6,]    6   26   46
 [7,]    7   27   47
 [8,]    8   28   48
 [9,]    9   29   49
[10,]   10   30   50
[11,]   11   31   51
[12,]   12   32   52
[13,]   13   33   53
[14,]   14   34   54
[15,]   15   35   55
[16,]   16   36   56
[17,]   17   37   57
[18,]   18   38   58
[19,]   19   39   59
[20,]   20   40   60

, , 2

      [,1] [,2] [,3]
 [1,]   61   81  101
 [2,]   62   82  102
 [3,]   63   83  103
 [4,]   64   84  104
 [5,]   65   85  105
 [6,]   66   86  106
 [7,]   67   87  107
 [8,]   68   88  108
 [9,]   69   89  109
[10,]   70   90  110
[11,]   71   91  111
[12,]   72   92  112
[13,]   73   93  113
[14,]   74   94  114
[15,]   75   95  115
[16,]   76   96  116
[17,]   77   97  117
[18,]   78   98  118
[19,]   79   99  119
[20,]   80  100  120

, , 3

      [,1] [,2] [,3]
 [1,]    1   21   41
 [2,]    2   22   42
 [3,]    3   23   43
 [4,]    4   24   44
 [5,]    5   25   45
 [6,]    6   26   46
 [7,]    7   27   47
 [8,]    8   28   48
 [9,]    9   29   49
[10,]   10   30   50
[11,]   11   31   51
[12,]   12   32   52
[13,]   13   33   53
[14,]   14   34   54
[15,]   15   35   55
[16,]   16   36   56
[17,]   17   37   57
[18,]   18   38   58
[19,]   19   39   59
[20,]   20   40   60

, , 4

      [,1] [,2] [,3]
 [1,]   61   81  101
 [2,]   62   82  102
 [3,]   63   83  103
 [4,]   64   84  104
 [5,]   65   85  105
 [6,]   66   86  106
 [7,]   67   87  107
 [8,]   68   88  108
 [9,]   69   89  109
[10,]   70   90  110
[11,]   71   91  111
[12,]   72   92  112
[13,]   73   93  113
[14,]   74   94  114
[15,]   75   95  115
[16,]   76   96  116
[17,]   77   97  117
[18,]   78   98  118
[19,]   79   99  119
[20,]   80  100  120

> apply(arr,c(1,2),mean)#计算每个柱子的均值
      [,1] [,2] [,3]
 [1,]   31   51   71
 [2,]   32   52   72
 [3,]   33   53   73
 [4,]   34   54   74
 [5,]   35   55   75
 [6,]   36   56   76
 [7,]   37   57   77
 [8,]   38   58   78
 [9,]   39   59   79
[10,]   40   60   80
[11,]   41   61   81
[12,]   42   62   82
[13,]   43   63   83
[14,]   44   64   84
[15,]   45   65   85
[16,]   46   66   86
[17,]   47   67   87
[18,]   48   68   88
[19,]   49   69   89
[20,]   50   70   90
> apply(arr,2,mean)
[1] 40.5 60.5 80.5
> apply(arr,c(1,3),mean)
      [,1] [,2] [,3] [,4]
 [1,]   21   81   21   81
 [2,]   22   82   22   82
 [3,]   23   83   23   83
 [4,]   24   84   24   84
 [5,]   25   85   25   85
 [6,]   26   86   26   86
 [7,]   27   87   27   87
 [8,]   28   88   28   88
 [9,]   29   89   29   89
[10,]   30   90   30   90
[11,]   31   91   31   91
[12,]   32   92   32   92
[13,]   33   93   33   93
[14,]   34   94   34   94
[15,]   35   95   35   95
[16,]   36   96   36   96
[17,]   37   97   37   97
[18,]   38   98   38   98
[19,]   39   99   39   99
[20,]   40  100   40  100
> apply(arr,c(2,3),mean)
     [,1]  [,2] [,3]  [,4]
[1,] 10.5  70.5 10.5  70.5
[2,] 30.5  90.5 30.5  90.5
[3,] 50.5 110.5 50.5 110.5
> mat
      [,1] [,2] [,3] [,4] [,5]
 [1,]    1   21   41   61   81
 [2,]    2   22   42   62   82
 [3,]    3   23   43   63   83
 [4,]    4   24   44   64   84
 [5,]    5   25   45   65   85
 [6,]    6   26   46   66   86
 [7,]    7   27   47   67   87
 [8,]    8   28   48   68   88
 [9,]    9   29   49   69   89
[10,]   10   30   50   70   90
[11,]   11   31   51   71   91
[12,]   12   32   52   72   92
[13,]   13   33   53   73   93
[14,]   14   34   54   74   94
[15,]   15   35   55   75   95
[16,]   16   36   56   76   96
[17,]   17   37   57   77   97
[18,]   18   38   58   78   98
[19,]   19   39   59   79   99
[20,]   20   40   60   80  100
> apply(mat,2,function (x)max(x)-min(x))
[1] 19 19 19 19 19
> #上述利用apply计算mat每一列的极差
> maxmin=function(x){}
> maxmin=function(x){max(x)-min(x)}
> apply(mat,2,maxmin)
[1] 19 19 19 19 19
> #综上,apply作用是将数据传入c apply，加快运算速度（上述针对矩阵和数组）
> lst=list(a=rnorm(10),b=1:9,c=runif(20))
> lst
$a
 [1]  1.1979813 -0.3718987  0.9196692 -0.6591824  1.1564698 -0.6069066 -0.5089178 -0.1628897  0.8020986
[10]  0.7277974

$b
[1] 1 2 3 4 5 6 7 8 9

$c
 [1] 0.77994054 0.35446941 0.30753682 0.76898192 0.84879772 0.51191367 0.05862975 0.51909659 0.48313542
[10] 0.14715239 0.65280109 0.01763791 0.75608307 0.97410237 0.19418363 0.91737415 0.16285504 0.65033807
[19] 0.76957456 0.41500248

> length(lst)
[1] 3
> lapply(lst,mean)
$a
[1] 0.2494221

$b
[1] 5

$c
[1] 0.5144803

> #上述lapply用于处理列表
> lis2=list(a=lis,b=lapply(lis,mean))
Error: object 'lis' not found
> lis2=list(a=lst,b=lapply(lst,mean))
> lis2
$a
$a$a
 [1]  1.1979813 -0.3718987  0.9196692 -0.6591824  1.1564698 -0.6069066 -0.5089178 -0.1628897  0.8020986
[10]  0.7277974

$a$b
[1] 1 2 3 4 5 6 7 8 9

$a$c
 [1] 0.77994054 0.35446941 0.30753682 0.76898192 0.84879772 0.51191367 0.05862975 0.51909659 0.48313542
[10] 0.14715239 0.65280109 0.01763791 0.75608307 0.97410237 0.19418363 0.91737415 0.16285504 0.65033807
[19] 0.76957456 0.41500248


$b
$b$a
[1] 0.2494221

$b$b
[1] 5

$b$c
[1] 0.5144803


> rapply(lst2,length)
Error in rapply(lst2, length) : object 'lst2' not found
> rapply(lis2,length)
a.a a.b a.c b.a b.b b.c 
 10   9  20   1   1   1 
> rapply(lis2,length,how="list")
$a
$a$a
[1] 10

$a$b
[1] 9

$a$c
[1] 20


$b
$b$a
[1] 1

$b$b
[1] 1

$b$c
[1] 1


> #rapply统计数量，how参数使得结果以列表形式输出
> lst1=list(a=4:6,b=5:7)
> lst2=list(a=3:5,b=8:10)
> mapply("+",lst1,lst2)
      a  b
[1,]  7 13
[2,]  9 15
[3,] 11 17
> lst1
$a
[1] 4 5 6

$b
[1] 5 6 7

> lst2
$a
[1] 3 4 5

$b
[1]  8  9 10

> mapply(sum,lst1,lst2)
 a  b 
27 45 
> lst3=list(a=lst1,b=lst2,c=matrix(1:10,5,2)
+ lst3
Error: unexpected symbol in:
"lst3=list(a=lst1,b=lst2,c=matrix(1:10,5,2)
lst3"
> lst3=list(a=lst1,b=lst2,c=matrix(1:10,5,2)
+ 
+ )
> lst3
$a
$a$a
[1] 4 5 6

$a$b
[1] 5 6 7


$b
$b$a
[1] 3 4 5

$b$b
[1]  8  9 10


$c
     [,1] [,2]
[1,]    1    6
[2,]    2    7
[3,]    3    8
[4,]    4    9
[5,]    5   10

> lapply(lst3,mean)
$a
[1] NA

$b
[1] NA

$c
[1] 5.5

Warning messages:
1: In mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
2: In mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
> rapply(lst3,mean)
a.a a.b b.a b.b   c 
5.0 6.0 4.0 9.0 5.5 
> rapply(lst3,mean,how="list")
$a
$a$a
[1] 5

$a$b
[1] 6


$b
$b$a
[1] 4

$b$b
[1] 9


$c
[1] 5.5

> lapply(lst3,length)
$a
[1] 2

$b
[1] 2

$c
[1] 10

> lapply(lst3,length,how="list")
Error in FUN(X[[i]], ...) : 
  2 arguments passed to 'length' which requires 1
> lst4=list(a=1:3,b=2:5)
> lst4
$a
[1] 1 2 3

$b
[1] 2 3 4 5

> lst5=list(a=2:4,b=2:5)
> lst5
$a
[1] 2 3 4

$b
[1] 2 3 4 5

> mapply('*',lst4,lst5)
$a
[1]  2  6 12

$b
[1]  4  9 16 25

> lst6=list(a=3:5,b=2:5)
> lst6
$a
[1] 3 4 5

$b
[1] 2 3 4 5

> mapply('*',lst4,lst5,lst6)
Error in .Primitive("*")(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]) : 
  operator needs one or two arguments
> mapply('+',lst4,lst5,lst6)
Error in .Primitive("+")(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]) : 
  operator needs one or two arguments
> #lapply可以对列表每一层进行运算，rapply更近一步，可以对嵌套列表的每一层进行处理，mapply可以处理两个相同key的列表
> lst31=list(a=lst1,b=lst2,c=matrix(2:12,5,2))
Warning message:
In matrix(2:12, 5, 2) :
  data length [11] is not a sub-multiple or multiple of the number of rows [5]
> lst31
$a
$a$a
[1] 4 5 6

$a$b
[1] 5 6 7


$b
$b$a
[1] 3 4 5

$b$b
[1]  8  9 10


$c
     [,1] [,2]
[1,]    2    7
[2,]    3    8
[3,]    4    9
[4,]    5   10
[5,]    6   11

> mapply(sum,lst3,lst31)
Error in .Primitive("sum")(dots[[1L]][[1L]], dots[[2L]][[1L]]) : 
  invalid 'type' (list) of argument
> #apply、lapply、rapply、mapply本质上都是循环，更加简洁和快速